# Moves a biped around based on its desires, which are set by a control tree or by code.
tree BipedActionTree
repeat
	condition
		{ $action_tree_component HasDesire "kinematic" }
		do() # Do nothing
		{ $action_tree_component HasDesire "idle" }
		call(BipedActionTreeIdling)
		{ $action_tree_component HasDesire "walk" }
		call(BipedActionTreeWalking)
		{ $action_tree_component HasDesire "run" }
		call(BipedActionTreeRunning)
		{ $action_tree_component HasDesire "jump" }
		call(BipedActionTreeJumping)
		{ $action_tree_component HasDesire "roll" }
		call(BipedActionTreeRolling)
		{ $action_tree_component HasDesire "flash_step" }
		call(BipedActionTreeFlashStepping)
		{ $action_tree_component HasDesire "fall" }
		call(BipedActionTreeFalling)

tree BipedActionTreeIdling
do({ $animator_component SetAnimation "idle" })

# detect rapid angle change for pivot
# { Dot(GetHeading2D($scene_transform_component), GetDesiredDirection2D($action_tree_component)) > 0 }

tree BipedActionTreeWalking
do # Set the heading to the input direction and animate forward.
	{ $scene_transform_component SetHeading GetDesiredDirection2D($action_tree_component) }
	{ $animator_component SetAnimation "walk" }

tree BipedActionTreeRunning
do # Set the heading to the input direction and animate forward.
	{ $scene_transform_component SetHeading GetDesiredDirection2D($action_tree_component) }
	{ $animator_component SetAnimation "run" }

tree BipedActionTreeJumping
sequence # Play a jump animation and then transition to falling.
	playAnimation("jump")
	call(BipedActionTreeFalling)

tree BipedActionTreeRolling
playAnimation("roll")

tree BipedActionTreeFlashStepping
playAnimation("flash_step")

tree BipedActionTreeFalling
sequence # Play a fall animation until on the ground, then transition to landing.
	domain
		{ GetDistanceAboveGround() > 0 }
		repeat(do({ $animator_component SetAnimation "fall" }))
	call(BipedActionTreeLanding)

tree BipedActionTreeLanding
playAnimation("landing")
