tree IslanderFishingTree
select
	domain # Ensure the islander is supposed to be fishing.
		ShouldFish()
		select
			domain # Fish from the water's edge.
				{ HasItem("fishing_rod") And { HasItem("bait") And IsAtWaterEdge() }}
				fish()
			domain # Go to the water's edge.
				{ HasItem("fishing_rod") And HasItem("bait") }
				goToWaterEdge()
			domain # If at the storage room, get a fishing rod and bait.
				IsInStorageRoom()
				condition
					Not(HasItem("fishing_rod"))
					takeItem("fishing_rod")
					Not(HasItem("bait"))
					takeItem("bait")
			goToStorageRoom() # Go to the storage room to get a fishing rod and bait.
	domain # Return the fishing rod and bait to the storage room.
		{ IsInStorageRoom() And { HasItem("fishing_rod") Or HasItem("bait") }}
		condition
			HasItem("fishing_rod")
			storeItem("fishing_rod")
			HasItem("bait")
			storeItem("bait")
	domain # Go to the storage room to return the fishing rod and bait.
		{ HasItem("fishing_rod") Or HasItem("bait") }
		goToStorageRoom()
	return(success)

# Moves a biped around based on its desires, which are set by a control tree or by code.
tree BipedActionTree
repeat
	condition
		{ $action_tree_component HasDesire "kinematic" }
		do() # Do nothing
		{ $action_tree_component HasDesire "idle" }
		call(BipedActionTreeIdling)
		{ $action_tree_component HasDesire "walk" }
		call(BipedActionTreeWalking)
		{ $action_tree_component HasDesire "run" }
		call(BipedActionTreeRunning)
		{ $action_tree_component HasDesire "jump" }
		call(BipedActionTreeJumping)
		{ $action_tree_component HasDesire "roll" }
		call(BipedActionTreeRolling)
		{ $action_tree_component HasDesire "flash_step" }
		call(BipedActionTreeFlashStepping)
		{ $action_tree_component HasDesire "fall" }
		call(BipedActionTreeFalling)

tree BipedActionTreeIdling
do({ $animator_component SetAnimation "idle" })

# detect rapid angle change for pivot
# { Dot(GetHeading2D($scene_transform_component), GetDesiredDirection2D($action_tree_component)) > 0 }

tree BipedActionTreeWalking
do # Set the heading to the input direction and animate forward.
	{ $scene_transform_component SetHeading GetDesiredDirection2D($action_tree_component) }
	{ $animator_component SetAnimation "walk" }

tree BipedActionTreeRunning
do # Set the heading to the input direction and animate forward.
	{ $scene_transform_component SetHeading GetDesiredDirection2D($action_tree_component) }
	{ $animator_component SetAnimation "run" }

tree BipedActionTreeJumping
sequence # Play a jump animation and then transition to falling.
	playAnimation("jump")
	call(BipedActionTreeFalling)

tree BipedActionTreeRolling
playAnimation("roll")

tree BipedActionTreeFlashStepping
playAnimation("flash_step")

tree BipedActionTreeFalling
sequence # Play a fall animation until on the ground, then transition to landing.
	domain
		{ GetDistanceAboveGround() > 0 }
		repeat(do({ $animator_component SetAnimation "fall" }))
	call(BipedActionTreeLanding)

tree BipedActionTreeLanding
playAnimation("landing")
