TODO:
[ ] Code-driven declarative UI creation functions for debug UI
	[ ] Formatted text display
	[x] Hierarchical panes
	[ ] Mouse input support
	[ ] Buttons
	[ ] Scroll panes
	[x] Keyboard input support
	[x] Text boxes
	[ ] Style sheets
	[ ] Improve text rendering using textured quads

[ ] ECS Improvements
	[ ] Entities should be updated in hierarchy order
	[x] Correctly transmit and handle changes in the components on an entity
	[x] Refactor ECS networking
		[x] Remove networking code from the ECS namespace & isolate it in the Network namespace
		[x] Store a history of full-frame serializations and use it to create delta transmissions for specific clients
		[x] Track the transmissions each client is aware of
		[x] Apply transmissions to the client
		[x] Prevent entity ID collisions between clients & host
	
[ ] Use UnboundedScene as a level format.
	[x] New component & system that loads chunks around it: Scene::AnchorComponent
	[x] Test scene of a camera and a mesh
	[x] Binary chunk format
	[ ] Rudimentary scene editor
		[ ] Replace the "info" pattern with direct component editing
			[x] Remove ComponentInfo; it's redundant with Component
				[x] Make behaviour trees load using the asset system
				[x] Remove ComponentInfo
				[x] Serialize & deserialize all component data
			[x] Remove EntityInfo; it's redundant with Chunk serialization
			[ ] Rudimentary UI for entity/component editing
				[x] Mechanism to represent the memory layout and type information of classes
				[ ] Ability to manipulate primitive data types (bool, int, float)
				[ ] Ability to manipulate math types (Vector3, Matrix4x4, etc.)
				[ ] Ability to manipulate collections (Vector, VectorMap, etc.)
				[ ] Ability to add and remove components from an entity
				[ ] Ability to select an entity in the scene for editing
				[ ] Ability to set the parent of an entity
		[ ] Improved UI for entity/component editing
			[ ] In-scene translation, rotation, and scale controls
			[ ] Display of the ECS::Systems which match and don't match an entity (and why)
	[ ] Nested scene support
		[ ] Allow scenes to be included in other scenes in a read-only way
		[ ] Allow overrides on entities of nested scenes
	[ ] Prevent conflicts between client, host, and scene entity IDs

[ ] Input
	[ ] Set InputComponent ClientID so that transmission works
	[ ] Save/load default input mapping and user input mapping
	[ ] Mouse wheel input

[ ] Networking
	[x] Socket needs to be able to send and receive data.
	[ ] Socket wrapper which breaks up messages into multiple packets and reconstructs them.

[ ] Meshes
	[x] Load static meshes
	[ ] Implement the following mesh format
		A mesh begins with the list of properties its vertices have, such as position, UVs, normals, etc.
		This is followed by its vertices in SoA format, where all data for each property is grouped together.
		This is followed by a list of triangles (triples of vertex indices).
		This is followed by a skeleton.
		Users of a mesh must verify it has all the properties they need.
		[x] Load this file format
		[ ] The skeleton exists in the scene as an entity hierarchy, which means an entity with a skeleton mesh
			has implicit children
			[x] In a networked context, the host is responsible for instantiating this hierarchy
		[ ] Import FBX files so they can be re-saved in this format
		[ ] Render rigged meshes

[ ] Animation
	[ ] Investigate open-source animation systems

DONE:
[x] LinearBlockAllocator must respect alignment of each element in a block

[x] Move meshes from Renderer to Conductor
	Meshes have rigs & collision geo that cannot be isolated into the renderer.
	Components must be moved; systems that render remain in the renderer.
	[x] Decouple bgfx data from mesh component so Conductor doesn't depend on it
		[x] EntityManager must track components added and removed per frame
			Can track either by component type or entity ID. Systems should only be informed of components
			added and removed on entities that they match.
			This will make it easier for systems to store data about their components outside of their components.
		[x] Store bgfx data in Renderer::MeshSystem rather than in MeshComponent

[x] Entity hierarchy: Allow entities to be attached to each other.
	[x] Add a parent/child relationship to entities and allow components/systems to use this
	[x] Make SceneTransformComponent aware of parent/child relationships
	[x] Make UnboundedScene and the chunk system aware of parent/child relationships
	[x] Make chunks preserve entity IDs. This is required so that parent/child relationships are correctly preserved
	[x] Thoroughly test

[x] Basic monospace text rendering
[x] Shader program loading and rendering